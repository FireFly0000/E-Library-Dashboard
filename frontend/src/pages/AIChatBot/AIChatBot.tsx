import { useEffect, useState, useRef } from "react";
import { useAppDispatch, useAppSelector } from "@/hooks/hooks";
import { bookActions } from "@/redux/slices";
import { Bot, LoaderCircle } from "lucide-react";
import { Button } from "@/components/ui/button";
import { SendHorizonal } from "lucide-react";
import { BookSuggestion } from "@/types/books";

interface Message {
  sender: "user" | "bot";
  content: string | BookSuggestion;
}

const AIChatBot = () => {
  const [messages, setMessages] = useState<Message[]>([]);
  const [input, setInput] = useState("");
  const chatContainerRef = useRef<HTMLDivElement | null>(null);
  const textAreaRef = useRef<HTMLTextAreaElement | null>(null);
  const dispatch = useAppDispatch();
  const booksSuggestionAIResponse = useAppSelector(
    (state) => state.bookSlice.booksSuggestionAIResponse
  );
  const isLoading = useAppSelector((state) => state.bookSlice.isLoading);

  // Ref for the end of chat log to scroll into view
  useEffect(() => {
    if (chatContainerRef.current) {
      chatContainerRef.current.scrollTop =
        chatContainerRef.current.scrollHeight;
    }
  }, [messages]);

  //Initial bot message
  useEffect(() => {
    setMessages((prevMessages) => [
      ...prevMessages,
      {
        sender: "bot",
        content: "Please describe the book you want to find for suggestions",
      },
    ]);
  }, []);

  //Update chat log when there's a new AI response
  useEffect(() => {
    if (booksSuggestionAIResponse) {
      setMessages((prevMessages) => [
        ...prevMessages,
        { sender: "bot", content: booksSuggestionAIResponse },
      ]);
    }
  }, [booksSuggestionAIResponse]);

  const sendMessage = async (message: string) => {
    const newMessages: Message[] = [
      ...messages,
      { sender: "user", content: message },
    ];

    setMessages(newMessages);
    await dispatch(bookActions.bookSuggestionAIService({ prompt: message }));
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (input.trim() === "") return;
    sendMessage(input);
    setInput("");
    if (textAreaRef.current) {
      textAreaRef.current.style.height = "auto"; // shrink back
    }
  };

  return (
    <main
      className=" flex items-center flex-col
      min-h-screen w-screen overflow-hidden"
    >
      <h1 className="text-2xl text-foreground mt-4 flex items-center gap-4">
        Gemini Chatbot <Bot />
      </h1>
      {/*main chatbot section */}
      <section
        className="flex justify-center items-center flex-col bg-card shadow-[0_4px_12px_rgba(0,0,0,0.1)] 
            w-[95vw] lg:w-[40vw] max-w-[800px] mt-5 mb-10 mx-0 rounded-2xl h-[80vh]
            py-[30px] px-[20px] sm:p-[30px] border-border border-solid border"
      >
        {/*chat log*/}
        <div
          ref={chatContainerRef}
          className="flex-1 overflow-y-auto p-4 space-y-4 w-full"
        >
          {messages.map((msg, index) => (
            <div
              key={index}
              className={`p-3 rounded-lg w-fit max-w-[80%] overflow-x-hidden break-words whitespace-pre-wrap  ${
                msg.sender === "user"
                  ? "bg-primary text-white ml-auto"
                  : "bg-gray-300 text-gray-800 mr-end"
              }`}
            >
              {typeof msg.content === "object" ? (
                <div className="space-y-2">
                  <h1 className="text-2xl font-bold">
                    Books List Generated By Gemini
                  </h1>
                  {msg.content.AIBooksList.map((book, i) => (
                    <div
                      key={i}
                      className="p-2 border border-border rounded-lg"
                    >
                      <p className="font-bold">
                        {i + 1}. {book.title}
                      </p>
                      <p className="italic">{book.author}</p>
                      <p className="text-sm text-gray-600">{book.genre}</p>
                      <p className="text-sm">{book.description}</p>
                    </div>
                  ))}

                  {msg.content.NewYorkTimesBestSellerBooks.length > 0 && (
                    <>
                      <div className="h-[2px] w-full bg-gray-800 my-2" />
                      <h1 className="text-2xl font-bold">
                        Books Selected From New York Times Weekly Best Sellers
                        List
                      </h1>
                    </>
                  )}
                  {/*Books list selected from NY times newest best seller */}
                  {msg.content.NewYorkTimesBestSellerBooks.length > 0 &&
                    msg.content.NewYorkTimesBestSellerBooks.map((book, i) => (
                      <div
                        key={i}
                        className="p-2 border border-border rounded-lg"
                      >
                        <p className="font-bold">
                          {i + 1}. {book.title}
                        </p>
                        <p className="italic">{book.author}</p>
                        <p className="text-sm text-gray-600">{book.genre}</p>
                        <p className="text-sm">{book.description}</p>
                      </div>
                    ))}
                </div>
              ) : (
                <span>{msg.content}</span>
              )}
            </div>
          ))}

          {isLoading && (
            <LoaderCircle className="text-foreground w-[70px] lg:w-[90px] animate-spin" />
          )}
        </div>

        {/*user's chat input */}
        <div className="flex items-end gap-4 p-2 lg:p-4 w-full">
          <textarea
            ref={textAreaRef}
            className="flex-1 border-border border-2 w-full rounded-lg focus:outline-none 
                text-foreground bg-card max-h-[150px] resize-none text-area"
            placeholder="Type your message..."
            value={input}
            onChange={(e) => {
              setInput(e.target.value);
              // auto-resize textarea height
              const target = e.target as HTMLTextAreaElement;
              target.style.height = "auto"; // reset
              target.style.height = `${target.scrollHeight}px`; // expand to content
            }}
            onKeyDown={(e) => {
              if (e.key === "Enter" && !e.shiftKey) {
                e.preventDefault(); // prevent newline
                handleSubmit(e); // trigger submit
              }
            }}
          />
          <Button variant="outline" size="sm" onClick={handleSubmit}>
            <SendHorizonal />
          </Button>
        </div>
      </section>
    </main>
  );
};

export default AIChatBot;
